apply from: 'gradle/deps.gradle'

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
  }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'
  apply plugin: 'com.bmuschko.nexus'
  apply plugin: 'org.junit.platform.gradle.plugin'

  group = 'com.github.tonivade'
  version = '0.3.0-SNAPSHOT'

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  jacoco {
    toolVersion = '0.8.0'
    applyTo junitPlatformTest
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
      xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
  }

  junitPlatformTest {
    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile libs.junitJupiter
    testCompile libs.junitVintage
    testCompile libs.junitRunner
  }
}

subprojects {
  modifyPom {
    project {
      name "ZeroMock-${project.name}"
      description "Mock Http Server (mostly) without dependencies"
      url "https://github.com/tonivade/zeromock"
      inceptionYear '2018'

      scm {
        url 'https://github.com/tonivade/zeromock'
        connection 'scm:https://github.com/tonivade/zeromock.git'
        developerConnection 'scm:git://github.com/tonivade/zeromock.git'
      }

      licenses {
        license {
          name 'The MIT License (MIT)'
          url 'https://github.com/tonivade/zeromock/blob/master/LICENSE'
          distribution 'repo'
        }
      }

      developers {
        developer {
          id 'tonivade'
          name 'Antonio Mu√±oz'
          email 'antoniogmc@gmail.com'
        }
      }
    }
  }

  extraArchive {
    sources = true
    tests = true
    javadoc = true
  }

  nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
  }
}

def publishedProjects = subprojects.findAll()

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'

  dependsOn(publishedProjects.test)

  additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(publishedProjects.sourceSets.main.output)
  executionData = files(publishedProjects.jacocoTestReport.executionData)

  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }

  reports {
    html.enabled = true
    xml.enabled = true
    xml.destination file("${buildDir}/reports/jacoco/fullReport.xml")
  }
}
